
import com.synthbot.jasiohost.AsioDriver;
import com.synthbot.jasiohost.AsioDriverState;
import com.synthbot.jasiohost.AsioException;
import java.awt.BorderLayout;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author imdc
 */
public class Interface extends javax.swing.JFrame {

    AsioDriver driver;
    AsioSoundHost listener;
    
    public static WavFileHandler file;
    
    public static JDialog dialog;
    public static JProgressBar progressBar;
    
    private ArrayList<WavFileHandler> files;
    private int channels;
    
    private final int MAX_FILES = 8;
    
    private boolean driverLoaded;
    
    /**
     * Creates new form Interface
     */
    public Interface() {
        channels = 0;
        files = new ArrayList<>();
        
        try {
            driver = AsioDriver.getDriver ( "ASIO PreSonus FireStudio" );
            
            this.driverLoaded = true;
        }
        catch ( AsioException ex ) {
            this.driverLoaded = false;
        }
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        uploadFile = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        newWaveFile = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 700));
        setMinimumSize(new java.awt.Dimension(800, 700));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jButton1.setText("Play Sound");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Upload a WAVE file:");

        uploadFile.setEditable(false);
        uploadFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uploadFileMouseClicked(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem3.setText("Configuration");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Import");

        newWaveFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/new_file.png"))); // NOI18N
        newWaveFile.setText("New WAVE File");
        newWaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newWaveFileActionPerformed(evt);
            }
        });
        jMenu2.add(newWaveFile);

        jMenuBar1.add(jMenu2);

        helpMenu.setText("Help");

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem2);

        jMenuItem1.setText("Information");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem1);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(uploadFile, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addComponent(jButton1)))
                .addContainerGap(153, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(188, 188, 188)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(430, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void newWaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newWaveFileActionPerformed
        
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter ( new SoundsFilter() );
        
        int returnedValue = fc.showDialog(rootPane, null);

        if (returnedValue == JFileChooser.APPROVE_OPTION) {
            try {
                /* Create the file with chosen path */
                String path = fc.getSelectedFile().getPath();
                WavFileHandler file = new WavFileHandler ( new File ( path ) );
                
                /* check if the file can be uploaded because of the number of channels (max = 8) */
                channels += file.getNumChannels();
            } catch (IOException ex) {
                System.out.println ( ex );
            } catch (UnsupportedAudioFileException ex) {
               System.out.println ( ex );
            }
        }
        
        if ( channels == 8 ) {
            newWaveFile.setEnabled ( false );
        }
        
    }//GEN-LAST:event_newWaveFileActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        JOptionPane.showMessageDialog ( null, "Maximum quantity of channels: 8\nFile extension supported: WAVE (wav)" );
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        JOptionPane.showMessageDialog ( null, "IMDC - Inclusive Media & Design Centre" );
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if ( this.driverLoaded ) {
            if ( driver.getCurrentState() != AsioDriverState.RUNNING ) {
                listener = new AsioSoundHost ( driver );
                driver.start();
            }
            else {
                listener.restart();
                driver.returnToState ( AsioDriverState.INITIALIZED );
                listener = new AsioSoundHost ( driver );
                driver.start();
            }
        }
        else {
            JOptionPane.showMessageDialog ( null, "The driver is not loaded or not selected.\nPlease go to File > Configuration to select 'ASIO PreSonus FireStudio' driver." );
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void uploadFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadFileMouseClicked
        
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter ( new SoundsFilter() );
        
        int returnedValue = fc.showDialog(rootPane, null);

        if (returnedValue == JFileChooser.APPROVE_OPTION) {
            try {
                /* Create the file with chosen path */
                    String path = fc.getSelectedFile().getPath();
                    File f = new File ( path );
                    file = new WavFileHandler ( f );
                
                /* Creates a load message */
                    JTextArea msgLabel;
                    final int MAX = 100;
                    JPanel panel;

                    progressBar = new JProgressBar ( 0, MAX );
                    progressBar.setIndeterminate ( false );
                    progressBar.setStringPainted ( true );
                    msgLabel = new JTextArea ( "Loading " + f.getName() );
                    msgLabel.setEditable ( false );

                    panel = new JPanel ( new BorderLayout ( 5, 5 ) );
                    panel.add ( msgLabel, BorderLayout.PAGE_START );
                    panel.add ( progressBar, BorderLayout.CENTER );
                    panel.setBorder ( BorderFactory.createEmptyBorder ( 11, 11, 11, 11 ) );

                    dialog = new JDialog ( Frame.getFrames()[0], "Loading...", true );
                    dialog.getContentPane().add ( panel );
                    dialog.setResizable ( false );
                    dialog.pack();
                    dialog.setSize ( 500, dialog.getHeight() );
                    dialog.setLocationRelativeTo ( null );
                    dialog.setAlwaysOnTop ( true );
                    msgLabel.setBackground ( panel.getBackground() );

                
                
                /* To load the file */
                    Thread t1 = new Thread() {

                        @Override
                        public void run() {
                            file.read();

                            dialog.dispose();
                        }

                    };

                t1.start();
                
                dialog.setVisible ( true );
            } catch (IOException ex) {
                System.out.println ( ex );
            } catch (UnsupportedAudioFileException ex) {
               System.out.println ( ex );
            }
        }
        
    }//GEN-LAST:event_uploadFileMouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        
        Configs config = new Configs();
        config.setVisible ( true );
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem newWaveFile;
    private javax.swing.JTextField uploadFile;
    // End of variables declaration//GEN-END:variables
}
